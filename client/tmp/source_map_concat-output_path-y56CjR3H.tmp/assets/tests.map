{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","ararice/tests/app.lint-test.js","ararice/tests/helpers/create-offline-ref.js","ararice/tests/helpers/destroy-app.js","ararice/tests/helpers/destroy-firebase-apps.js","ararice/tests/helpers/ember-i18n/test-helpers.js","ararice/tests/helpers/module-for-acceptance.js","ararice/tests/helpers/replace-app-ref.js","ararice/tests/helpers/replace-firebase-app-service.js","ararice/tests/helpers/resolver.js","ararice/tests/helpers/start-app.js","ararice/tests/helpers/stub-firebase.js","ararice/tests/helpers/unstub-firebase.js","ararice/tests/integration/components/ara-calculator-card-test.js","ararice/tests/integration/components/ara-card-test.js","ararice/tests/integration/components/ara-carousel-test.js","ararice/tests/integration/components/ara-categorybar-test.js","ararice/tests/integration/components/ara-footer-test.js","ararice/tests/integration/components/ara-item-card-test.js","ararice/tests/integration/components/ara-login-test.js","ararice/tests/integration/components/ara-myorder-card-test.js","ararice/tests/integration/components/ara-myorder-test.js","ararice/tests/integration/components/ara-navbar-test.js","ararice/tests/integration/components/ara-popularitem-test.js","ararice/tests/integration/components/ara-shoppingcar-card-test.js","ararice/tests/integration/components/ara-sidebar-test.js","ararice/tests/integration/components/ara-signup-test.js","ararice/tests/integration/components/tiny/ara-logtitle-test.js","ararice/tests/integration/components/tiny/ara-sidebar-menu-test.js","ararice/tests/test-helper.js","ararice/tests/tests.lint-test.js","ararice/tests/unit/feature/admin/address-management/route-test.js","ararice/tests/unit/feature/admin/invite-people/route-test.js","ararice/tests/unit/feature/admin/my-balance/route-test.js","ararice/tests/unit/feature/admin/my-message/route-test.js","ararice/tests/unit/feature/admin/my-points/route-test.js","ararice/tests/unit/feature/admin/myorder/route-test.js","ararice/tests/unit/feature/admin/payment-management/route-test.js","ararice/tests/unit/feature/admin/route-test.js","ararice/tests/unit/feature/admin/wish-lists/route-test.js","ararice/tests/unit/feature/cart/route-test.js","ararice/tests/unit/feature/collections/route-test.js","ararice/tests/unit/feature/home/route-test.js","ararice/tests/unit/feature/login/route-test.js","ararice/tests/unit/initializers/i18n-test.js","ararice/tests/unit/upload/route-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('ararice/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/ara-calculator-card.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/ara-calculator-card.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/ara-card.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/ara-card.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/ara-carousel.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/ara-carousel.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/ara-categorybar.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/ara-categorybar.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/ara-footer.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/ara-footer.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/ara-item-card.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/ara-item-card.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/ara-login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/ara-login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/ara-myorder-card.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/ara-myorder-card.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/ara-myorder.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/ara-myorder.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/ara-navbar.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/ara-navbar.js should pass ESLint\\n\\n6:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n9:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n10:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n11:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n12:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n13:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n14:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n15:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n16:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n\n  QUnit.test('components/ara-popularitem.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/ara-popularitem.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/ara-shoppingcar-card.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/ara-shoppingcar-card.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/ara-sidebar.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/ara-sidebar.js should pass ESLint\\n\\n6:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n9:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n10:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n11:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n\n  QUnit.test('components/ara-signup.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/ara-signup.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/tiny/ara-logtitle.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/tiny/ara-logtitle.js should pass ESLint\\n\\n7:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n10:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n11:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n12:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n13:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n14:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n15:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n16:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n17:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n\n  QUnit.test('components/tiny/ara-sidebar-menu.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/tiny/ara-sidebar-menu.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('feature/admin/address-management/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'feature/admin/address-management/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('feature/admin/invite-people/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'feature/admin/invite-people/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('feature/admin/my-balance/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'feature/admin/my-balance/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('feature/admin/my-message/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'feature/admin/my-message/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('feature/admin/my-points/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'feature/admin/my-points/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('feature/admin/myorder/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'feature/admin/myorder/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('feature/admin/payment-management/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'feature/admin/payment-management/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('feature/admin/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'feature/admin/route.js should pass ESLint\\n\\n4:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n5:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n6:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n\n  QUnit.test('feature/admin/wish-lists/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'feature/admin/wish-lists/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('feature/cart/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'feature/cart/route.js should pass ESLint\\n\\n6:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n7:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n8:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n\n  QUnit.test('feature/collections/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'feature/collections/route.js should pass ESLint\\n\\n6:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n7:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n8:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n\n  QUnit.test('feature/home/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'feature/home/route.js should pass ESLint\\n\\n6:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n7:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n8:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n\n  QUnit.test('feature/login/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'feature/login/route.js should pass ESLint\\n\\n6:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n7:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n8:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n\n  QUnit.test('feature/signup/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'feature/signup/route.js should pass ESLint\\n\\n5:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n6:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n7:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n\n  QUnit.test('initializers/i18n.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/i18n.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('locales/ch/config.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ch/config.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('locales/ch/translations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ch/translations.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('locales/es/config.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/es/config.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('locales/es/translations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/es/translations.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/post.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/post.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('upload/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'upload/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('upload/post.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'upload/post.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('upload/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'upload/route.js should pass ESLint\\n\\n');\n  });\n});","define('ararice/tests/helpers/create-offline-ref', ['exports', 'firebase'], function (exports, _firebase) {\n  exports['default'] = createOfflineRef;\n\n  /**\n   * Creates an offline firebase reference with optional initial data and url.\n   *\n   * Be sure to `stubfirebase()` and `unstubfirebase()` in your tests!\n   *\n   * @param  {!Object} [initialData]\n   * @param  {string} [url]\n   * @param  {string} [apiKey]\n   * @return {!firebase.database.Reference}\n   */\n\n  function createOfflineRef(initialData) {\n    var url = arguments.length <= 1 || arguments[1] === undefined ? 'https://emberfire-tests-2c814.firebaseio.com' : arguments[1];\n    var apiKey = arguments.length <= 2 || arguments[2] === undefined ? 'AIzaSyC9-ndBb1WR05rRF1msVQDV6EBqB752m6o' : arguments[2];\n\n    if (!_firebase['default']._unStub) {\n      throw new Error('Please use stubFirebase() before calling this method');\n    }\n\n    var config = {\n      apiKey: apiKey,\n      authDomain: 'emberfire-tests-2c814.firebaseapp.com',\n      databaseURL: url,\n      storageBucket: ''\n    };\n\n    var app = undefined;\n\n    try {\n      app = _firebase['default'].app();\n    } catch (e) {\n      app = _firebase['default'].initializeApp(config);\n    }\n\n    var ref = app.database().ref();\n\n    app.database().goOffline(); // must be called after the ref is created\n\n    if (initialData) {\n      ref.set(initialData);\n    }\n\n    return ref;\n  }\n});","define('ararice/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('ararice/tests/helpers/destroy-firebase-apps', ['exports', 'ember', 'firebase'], function (exports, _ember, _firebase) {\n  exports['default'] = destroyFirebaseApps;\n  var run = _ember['default'].run;\n\n  /**\n   * Destroy all Firebase apps.\n   */\n\n  function destroyFirebaseApps() {\n    var deletions = _firebase['default'].apps.map(function (app) {\n      return app['delete']();\n    });\n    _ember['default'].RSVP.all(deletions).then(function () {\n      return run(function () {\n        // NOOP to delay run loop until the apps are destroyed\n      });\n    });\n  }\n});","define('ararice/tests/helpers/ember-i18n/test-helpers', ['exports', 'ember'], function (exports, _ember) {\n\n  // example usage: find(`.header:contains(${t('welcome_message')})`)\n  _ember['default'].Test.registerHelper('t', function (app, key, interpolations) {\n    var i18n = app.__container__.lookup('service:i18n');\n    return i18n.t(key, interpolations);\n  });\n\n  // example usage: expectTranslation('.header', 'welcome_message');\n  _ember['default'].Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {\n    var text = app.testHelpers.t(key, interpolations);\n\n    assertTranslation(element, key, text);\n  });\n\n  var assertTranslation = (function () {\n    if (typeof QUnit !== 'undefined' && typeof QUnit.assert.ok === 'function') {\n      return function (element, key, text) {\n        QUnit.assert.ok(find(element + ':contains(' + text + ')').length, 'Found translation key ' + key + ' in ' + element);\n      };\n    } else if (typeof expect === 'function') {\n      return function (element, key, text) {\n        var found = !!find(element + ':contains(' + text + ')').length;\n        expect(found).to.equal(true);\n      };\n    } else {\n      return function () {\n        throw new Error(\"ember-i18n could not find a compatible test framework\");\n      };\n    }\n  })();\n});","define('ararice/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'ararice/tests/helpers/start-app', 'ararice/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _arariceTestsHelpersStartApp, _arariceTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _arariceTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _arariceTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('ararice/tests/helpers/replace-app-ref', ['exports'], function (exports) {\n  exports['default'] = replaceAppRef;\n  /**\n   * Updates the supplied app adapter's Firebase reference.\n   *\n   * @param  {!Ember.Application} app\n   * @param  {!firebase.database.Reference} ref\n   * @param  {string} [model]  The model, if overriding a model specific adapter\n   */\n\n  function replaceAppRef(app, ref) {\n    var model = arguments.length <= 2 || arguments[2] === undefined ? 'application' : arguments[2];\n\n    app.register('service:firebaseMock', ref, { instantiate: false, singleton: true });\n    app.inject('adapter:firebase', 'firebase', 'service:firebaseMock');\n    app.inject('adapter:' + model, 'firebase', 'service:firebaseMock');\n  }\n});","define('ararice/tests/helpers/replace-firebase-app-service', ['exports'], function (exports) {\n  exports['default'] = replaceFirebaseAppService;\n  /**\n   * Replaces the `firebaseApp` service with your own using injection overrides.\n   *\n   * This is usually not needed in test modules, where you can re-register over\n   * existing names in the registry, but in acceptance tests, some registry/inject\n   * magic is needed.\n   *\n   * @param  {!Ember.Application} app\n   * @param  {!Object} newService\n   */\n\n  function replaceFirebaseAppService(app, newService) {\n    app.register('service:firebaseAppMock', newService, { instantiate: false, singleton: true });\n    app.inject('torii-provider:firebase', 'firebaseApp', 'service:firebaseAppMock');\n    app.inject('torii-adapter:firebase', 'firebaseApp', 'service:firebaseAppMock');\n  }\n});","define('ararice/tests/helpers/resolver', ['exports', 'ararice/resolver', 'ararice/config/environment'], function (exports, _arariceResolver, _arariceConfigEnvironment) {\n\n  var resolver = _arariceResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _arariceConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _arariceConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('ararice/tests/helpers/start-app', ['exports', 'ember', 'ararice/app', 'ararice/config/environment'], function (exports, _ember, _arariceApp, _arariceConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var attributes = _ember['default'].merge({}, _arariceConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    return _ember['default'].run(function () {\n      var application = _arariceApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('ararice/tests/helpers/stub-firebase', ['exports', 'firebase'], function (exports, _firebase) {\n  exports['default'] = stubFirebase;\n\n  /**\n   * When a reference is in offline mode it will not call any callbacks\n   * until it goes online and resyncs. The ref will have already\n   * updated its internal cache with the changed values so we shortcut\n   * the process and call the supplied callbacks immediately (asynchronously).\n   */\n\n  function stubFirebase() {\n    // check for existing stubbing\n    if (!_firebase['default']._unStub) {\n      var originalSet = _firebase['default'].database.Reference.prototype.set;\n      var originalUpdate = _firebase['default'].database.Reference.prototype.update;\n      var originalRemove = _firebase['default'].database.Reference.prototype.remove;\n\n      _firebase['default']._unStub = function () {\n        _firebase['default'].database.Reference.prototype.set = originalSet;\n        _firebase['default'].database.Reference.prototype.update = originalUpdate;\n        _firebase['default'].database.Reference.prototype.remove = originalRemove;\n      };\n\n      _firebase['default'].database.Reference.prototype.set = function (data, cb) {\n        originalSet.call(this, data);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n\n      _firebase['default'].database.Reference.prototype.update = function (data, cb) {\n        originalUpdate.call(this, data);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n\n      _firebase['default'].database.Reference.prototype.remove = function (cb) {\n        originalRemove.call(this);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n    }\n  }\n});","define('ararice/tests/helpers/unstub-firebase', ['exports', 'firebase'], function (exports, _firebase) {\n  exports['default'] = unstubFirebase;\n\n  function unstubFirebase() {\n    if (typeof _firebase['default']._unStub === 'function') {\n      _firebase['default']._unStub();\n      delete _firebase['default']._unStub;\n    }\n  }\n});","define('ararice/tests/integration/components/ara-calculator-card-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ara-calculator-card', 'Integration | Component | ara calculator card', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'wJmFUgEd',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"ara-calculator-card\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'o5KcFLCF',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"ara-calculator-card\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ararice/tests/integration/components/ara-card-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ara-card', 'Integration | Component | ara card', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'r6L9Pfh7',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"ara-card\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '/1Ivyb8B',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"ara-card\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ararice/tests/integration/components/ara-carousel-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ara-carousel', 'Integration | Component | ara carousel', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'acrEhcWk',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"ara-carousel\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'SlNe3lyA',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"ara-carousel\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ararice/tests/integration/components/ara-categorybar-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ara-categorybar', 'Integration | Component | ara categorybar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '1B+1GTSZ',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"ara-categorybar\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'tf2UAk1g',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"ara-categorybar\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ararice/tests/integration/components/ara-footer-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ara-footer', 'Integration | Component | ara footer', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'xlaybk4e',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"ara-footer\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '1BY0H7gV',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"ara-footer\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ararice/tests/integration/components/ara-item-card-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ara-item-card', 'Integration | Component | ara item card', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '3ZIq8N+5',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"ara-item-card\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'KEDeAwkT',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"ara-item-card\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ararice/tests/integration/components/ara-login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ara-login', 'Integration | Component | ara login', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'sDg5E+es',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"ara-login\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'qZTMY7jv',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"ara-login\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ararice/tests/integration/components/ara-myorder-card-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ara-myorder-card', 'Integration | Component | ara myorder card', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '0K0rXsW6',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"ara-myorder-card\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'pelsiVzL',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"ara-myorder-card\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ararice/tests/integration/components/ara-myorder-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ara-myorder', 'Integration | Component | ara myorder', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'ynWQlOvN',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"ara-myorder\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'thbL9H5n',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"ara-myorder\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ararice/tests/integration/components/ara-navbar-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ara-navbar', 'Integration | Component | ara navbar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'VJuYuxto',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"ara-navbar\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'K9jBsrtB',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"ara-navbar\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ararice/tests/integration/components/ara-popularitem-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ara-popularitem', 'Integration | Component | ara popularitem', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '6gjawZyQ',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"ara-popularitem\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'NrhkHKek',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"ara-popularitem\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ararice/tests/integration/components/ara-shoppingcar-card-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ara-shoppingcar-card', 'Integration | Component | ara shoppingcar card', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'Nbajhs2C',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"ara-shoppingcar-card\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'zYlp7h7x',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"ara-shoppingcar-card\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ararice/tests/integration/components/ara-sidebar-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ara-sidebar', 'Integration | Component | ara sidebar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'eFDx+FqP',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"ara-sidebar\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'W30Sy7My',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"ara-sidebar\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ararice/tests/integration/components/ara-signup-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ara-signup', 'Integration | Component | ara signup', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '1gmqm9a6',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"ara-signup\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'JroW9iva',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"ara-signup\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ararice/tests/integration/components/tiny/ara-logtitle-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('tiny/ara-logtitle', 'Integration | Component | tiny/ara logtitle', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'W0oH5WIh',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"tiny/ara-logtitle\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '1KLmgQku',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"tiny/ara-logtitle\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ararice/tests/integration/components/tiny/ara-sidebar-menu-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('tiny/ara-sidebar-menu', 'Integration | Component | tiny/ara sidebar menu', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'TBt2WzjQ',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"tiny/ara-sidebar-menu\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'DOB4OhKC',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"tiny/ara-sidebar-menu\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ararice/tests/test-helper', ['exports', 'ararice/tests/helpers/resolver', 'ember-qunit'], function (exports, _arariceTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_arariceTestsHelpersResolver['default']);\n});","define('ararice/tests/tests.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ara-calculator-card-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ara-calculator-card-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ara-card-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ara-card-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ara-carousel-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ara-carousel-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ara-categorybar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ara-categorybar-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ara-footer-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ara-footer-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ara-item-card-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ara-item-card-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ara-login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ara-login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ara-myorder-card-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ara-myorder-card-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ara-myorder-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ara-myorder-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ara-navbar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ara-navbar-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ara-popularitem-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ara-popularitem-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ara-shoppingcar-card-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ara-shoppingcar-card-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ara-sidebar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ara-sidebar-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ara-signup-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ara-signup-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tiny/ara-logtitle-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tiny/ara-logtitle-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tiny/ara-sidebar-menu-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tiny/ara-sidebar-menu-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/feature/admin/address-management/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/feature/admin/address-management/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/feature/admin/invite-people/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/feature/admin/invite-people/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/feature/admin/my-balance/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/feature/admin/my-balance/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/feature/admin/my-message/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/feature/admin/my-message/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/feature/admin/my-points/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/feature/admin/my-points/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/feature/admin/myorder/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/feature/admin/myorder/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/feature/admin/payment-management/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/feature/admin/payment-management/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/feature/admin/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/feature/admin/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/feature/admin/wish-lists/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/feature/admin/wish-lists/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/feature/cart/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/feature/cart/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/feature/collections/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/feature/collections/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/feature/home/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/feature/home/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/feature/login/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/feature/login/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/initializers/i18n-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/i18n-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/upload/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/upload/route-test.js should pass ESLint\\n\\n');\n  });\n});","define('ararice/tests/unit/feature/admin/address-management/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:feature/admin/address-management', 'Unit | Route | feature/admin/address management', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ararice/tests/unit/feature/admin/invite-people/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:feature/admin/invite-people', 'Unit | Route | feature/admin/invite people', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ararice/tests/unit/feature/admin/my-balance/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:feature/admin/my-balance', 'Unit | Route | feature/admin/my balance', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ararice/tests/unit/feature/admin/my-message/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:feature/admin/my-message', 'Unit | Route | feature/admin/my message', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ararice/tests/unit/feature/admin/my-points/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:feature/admin/my-points', 'Unit | Route | feature/admin/my points', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ararice/tests/unit/feature/admin/myorder/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:feature/admin/myorder', 'Unit | Route | feature/admin/myorder', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ararice/tests/unit/feature/admin/payment-management/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:feature/admin/payment-management', 'Unit | Route | feature/admin/payment management', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ararice/tests/unit/feature/admin/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:feature/admin', 'Unit | Route | feature/admin', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ararice/tests/unit/feature/admin/wish-lists/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:feature/admin/wish-lists', 'Unit | Route | feature/admin/wish lists', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ararice/tests/unit/feature/cart/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:feature/cart', 'Unit | Route | feature/cart', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ararice/tests/unit/feature/collections/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:feature/collections', 'Unit | Route | feature/collections', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ararice/tests/unit/feature/home/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:feature/home', 'Unit | Route | feature/home', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ararice/tests/unit/feature/login/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:feature/login', 'Unit | Route | feature/login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ararice/tests/unit/initializers/i18n-test', ['exports', 'ember', 'ararice/initializers/i18n', 'qunit', 'ararice/tests/helpers/destroy-app'], function (exports, _ember, _arariceInitializersI18n, _qunit, _arariceTestsHelpersDestroyApp) {\n\n  (0, _qunit.module)('Unit | Initializer | i18n', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      _ember['default'].run(function () {\n        _this.application = _ember['default'].Application.create();\n        _this.application.deferReadiness();\n      });\n    },\n    afterEach: function afterEach() {\n      (0, _arariceTestsHelpersDestroyApp['default'])(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _arariceInitializersI18n.initialize)(this.application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('ararice/tests/unit/upload/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:upload', 'Unit | Route | upload', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","require('ararice/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;","file":"tests.js"}